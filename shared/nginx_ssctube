##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

upstream magento {
	server 127.0.0.1:8080;
}

upstream webhook {
	server 127.0.0.1:8000;
}

server {
    listen       80;
    server_name   ssctube.com;
    return       301 http://www.$server_name$request_uri;
}
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/ssctube;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name www.ssctube.com;
	include hhvm.conf;
	
	location /txn-logs {
        	auth_basic            "Authorized SscTube staff only";
       	 	auth_basic_user_file  /etc/nginx/.htpasswd;
		alias /tmp/transaction_status.log;
		access_log off;
    	}


	location /stats {
		auth_basic            "Authorized SscTube staff only";
                auth_basic_user_file  /etc/nginx/.htpasswd;
		stub_status on;
       		access_log   off;
	}
	location / {

	#if (-f /tmp/maintenance) {
        #        return 503;
        #}

	#error_page 503 @maintenance;
        #location @maintenance {
	#	root /var/www;
        #       	rewrite ^(.*)$ /maintenance.html break;
        #}
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ /index.php?q=$uri&$args;
	}

	expires    24h;
        #expires    modified +24h;
        #expires    @24h;
        #expires    0;
        #expires    -1;
        #expires    epoch;
  
        #expires    $expires;

	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
	add_header 'Access-Control-Allow-Methods' 'POST, GET, PUT, DELETE';
	add_header Pragma public;
	add_header Cache-Control "public";
	
	proxy_set_header Access-Control-Allow-Origin $http_origin;

	location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ 		{
        	expires 14d;
        	log_not_found off;
        	access_log off;
    	  }

	location /webhook-receive {
		proxy_pass http://webhook;
	}
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	        try_files $uri =404;
		include fastcgi_params;
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php5-fpm:
		fastcgi_pass unix:/var/run/php5-fpm.sock;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
